{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "515017cf-bc6b-4396-9381-67b3771d46b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Servo Angle: 103\n",
      "Servo Angle: 63\n",
      "Servo Angle: 100\n",
      "Servo Angle: 63\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 101\n",
      "Servo Angle: 63\n",
      "Servo Angle: 100\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 93\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 100\n",
      "Servo Angle: 64\n",
      "Servo Angle: 94\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 54\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 99\n",
      "Servo Angle: 64\n",
      "Servo Angle: 101\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 94\n",
      "Servo Angle: 63\n",
      "Servo Angle: 100\n",
      "Servo Angle: 64\n",
      "Servo Angle: 100\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 99\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 100\n",
      "Servo Angle: 64\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 99\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 98\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 100\n",
      "Servo Angle: 24\n",
      "Servo Angle: 63\n",
      "Servo Angle: 88\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 91\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 64\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 91\n",
      "Servo Angle: 95\n",
      "Servo Angle: 64\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 95\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 98\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 104\n",
      "Servo Angle: 91\n",
      "Servo Angle: 24\n",
      "Servo Angle: 64\n",
      "Servo Angle: 105\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 91\n",
      "Servo Angle: 22\n",
      "Servo Angle: 88\n",
      "Servo Angle: 64\n",
      "Servo Angle: 88\n",
      "Servo Angle: 63\n",
      "Servo Angle: 87\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 100\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 92\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 63\n",
      "Servo Angle: 90\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 63\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 91\n",
      "Servo Angle: 24\n",
      "Servo Angle: 64\n",
      "Servo Angle: 101\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 102\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 103\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 88\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 147\n",
      "Servo Angle: 89\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 127\n",
      "Servo Angle: 64\n",
      "Servo Angle: 129\n",
      "Servo Angle: 92\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 135\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 140\n",
      "Servo Angle: 102\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 119\n",
      "Servo Angle: 101\n",
      "Servo Angle: 132\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 128\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 104\n",
      "Servo Angle: 90\n",
      "Servo Angle: 126\n",
      "Servo Angle: 64\n",
      "Servo Angle: 105\n",
      "Servo Angle: 90\n",
      "Servo Angle: 63\n",
      "Servo Angle: 23\n",
      "Servo Angle: 92\n",
      "Servo Angle: 24\n",
      "Servo Angle: 64\n",
      "Servo Angle: 89\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 94\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 54\n",
      "Servo Angle: 92\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 63\n",
      "Servo Angle: 22\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 78\n",
      "Servo Angle: 78\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 87\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 99\n",
      "Servo Angle: 64\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 77\n",
      "Servo Angle: 92\n",
      "Servo Angle: 64\n",
      "Servo Angle: 92\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 90\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 79\n",
      "Servo Angle: 54\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 77\n",
      "Servo Angle: 91\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 80\n",
      "Servo Angle: 101\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 101\n",
      "Servo Angle: 64\n",
      "Servo Angle: 78\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 78\n",
      "Servo Angle: 23\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 94\n",
      "Servo Angle: 64\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 23\n",
      "Servo Angle: 93\n",
      "Servo Angle: 64\n",
      "Servo Angle: 22\n",
      "Servo Angle: 99\n",
      "Servo Angle: 19\n",
      "Servo Angle: 89\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import serial\n",
    "import time\n",
    "\n",
    "# Load YOLO\n",
    "net = cv2.dnn.readNet(\"yolov3.weights\", \"yolov3.cfg\")\n",
    "layer_names = net.getLayerNames()\n",
    "\n",
    "output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]\n",
    "# Load class labels\n",
    "with open(\"coco.names\", \"r\") as f:\n",
    "    classes = [line.strip() for line in f]\n",
    "\n",
    "# Initialize serial connection to Arduino\n",
    "ser = serial.Serial('COM7', 9600)  # Change 'COM3' to the port your Arduino is connected to\n",
    "\n",
    "# Function to detect objects\n",
    "def detect_objects(img):\n",
    "    height, width, channels = img.shape\n",
    "    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n",
    "    net.setInput(blob)\n",
    "    outs = net.forward(output_layers)\n",
    "\n",
    "    class_ids = []\n",
    "    confidences = []\n",
    "    boxes = []\n",
    "    for out in outs:\n",
    "        for detection in out:\n",
    "            scores = detection[5:]\n",
    "            class_id = np.argmax(scores)\n",
    "            confidence = scores[class_id]\n",
    "            if confidence > 0.5:\n",
    "                center_x = int(detection[0] * width)\n",
    "                center_y = int(detection[1] * height)\n",
    "                w = int(detection[2] * width)\n",
    "                h = int(detection[3] * height)\n",
    "                x = int(center_x - w / 2)\n",
    "                y = int(center_y - h / 2)\n",
    "                boxes.append([x, y, w, h])\n",
    "                confidences.append(float(confidence))\n",
    "                class_ids.append(class_id)\n",
    "    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)\n",
    "    return indexes, boxes, class_ids  # Return class_ids along with indexes and boxes\n",
    "\n",
    "\n",
    "def main():\n",
    "    cap = cv2.VideoCapture(0)\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        indexes, boxes, class_ids = detect_objects(frame)  # Capture class_ids variable\n",
    "\n",
    "        for i in range(len(boxes)):\n",
    "            if i in indexes:\n",
    "                x, y, w, h = boxes[i]\n",
    "                label = str(classes[class_ids[i]])\n",
    "                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)\n",
    "                cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)\n",
    "\n",
    "                # Calculate servo angle\n",
    "                x_center = x + w / 2\n",
    "                servo_angle = int(np.interp(x_center, [0, frame.shape[1]], [0, 180]))\n",
    "\n",
    "                # Send servo angle to Arduino\n",
    "                ser.write(f\"{servo_angle}\\n\".encode())\n",
    "\n",
    "                # Print servo angle\n",
    "                print(f\"Servo Angle: {servo_angle}\")\n",
    "\n",
    "        cv2.imshow(\"Farm Field Monitoring\", frame)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "addd9a59-297a-4aa9-864a-7de3cf2716cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Servo Angle: 142\n",
      "Servo Angle: 104\n",
      "Servo Angle: 105\n",
      "Servo Angle: 102\n",
      "Servo Angle: 102\n",
      "Servo Angle: 115\n",
      "Servo Angle: 64\n",
      "Servo Angle: 117\n",
      "Servo Angle: 86\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 91\n",
      "Servo Angle: 90\n",
      "Servo Angle: 119\n",
      "Servo Angle: 118\n",
      "Servo Angle: 47\n",
      "Servo Angle: 74\n",
      "Servo Angle: 75\n",
      "Servo Angle: 59\n",
      "Servo Angle: 46\n",
      "Servo Angle: 32\n",
      "Servo Angle: 144\n",
      "Servo Angle: 24\n",
      "Servo Angle: 78\n",
      "Servo Angle: 89\n",
      "Servo Angle: 35\n",
      "Servo Angle: 78\n",
      "Servo Angle: 25\n",
      "Servo Angle: 9\n",
      "Servo Angle: 89\n",
      "Servo Angle: 32\n",
      "Servo Angle: 16\n",
      "Servo Angle: 104\n",
      "Servo Angle: 45\n",
      "Servo Angle: 105\n",
      "Servo Angle: 49\n",
      "Servo Angle: 32\n",
      "Servo Angle: 14\n",
      "Servo Angle: 105\n",
      "Servo Angle: 51\n",
      "Servo Angle: 101\n",
      "Servo Angle: 91\n",
      "Servo Angle: 19\n",
      "Servo Angle: 93\n",
      "Servo Angle: 92\n",
      "Servo Angle: 14\n",
      "Servo Angle: 92\n",
      "Servo Angle: 92\n",
      "Servo Angle: 91\n",
      "Servo Angle: 92\n",
      "Servo Angle: 101\n",
      "Servo Angle: 9\n",
      "Servo Angle: 50\n",
      "Servo Angle: 156\n",
      "Servo Angle: 145\n",
      "Servo Angle: 121\n",
      "Servo Angle: 88\n",
      "Servo Angle: 79\n",
      "Servo Angle: 87\n",
      "Servo Angle: 77\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 77\n",
      "Servo Angle: 118\n",
      "Servo Angle: 62\n",
      "Servo Angle: 62\n",
      "Servo Angle: 75\n",
      "Servo Angle: 62\n",
      "Servo Angle: 76\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 5\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 79\n",
      "Servo Angle: 87\n",
      "Servo Angle: 87\n",
      "Servo Angle: 88\n",
      "Servo Angle: 4\n",
      "Servo Angle: 88\n",
      "Servo Angle: 5\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 79\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 79\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 90\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 78\n",
      "Servo Angle: 8\n",
      "Servo Angle: 89\n",
      "Servo Angle: 8\n",
      "Servo Angle: 100\n",
      "Servo Angle: 102\n",
      "Servo Angle: 103\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 91\n",
      "Servo Angle: 118\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 102\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 90\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 65\n",
      "Servo Angle: 90\n",
      "Servo Angle: 103\n",
      "Servo Angle: 103\n",
      "Servo Angle: 117\n",
      "Servo Angle: 92\n",
      "Servo Angle: 60\n",
      "Servo Angle: 77\n",
      "Servo Angle: 78\n",
      "Servo Angle: 60\n",
      "Servo Angle: 77\n",
      "Servo Angle: 87\n",
      "Servo Angle: 87\n",
      "Servo Angle: 88\n",
      "Servo Angle: 19\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 34\n",
      "Servo Angle: 89\n",
      "Servo Angle: 9\n",
      "Servo Angle: 19\n",
      "Servo Angle: 87\n",
      "Servo Angle: 8\n",
      "Servo Angle: 35\n",
      "Servo Angle: 18\n",
      "Servo Angle: 87\n",
      "Servo Angle: 4\n",
      "Servo Angle: 15\n",
      "Servo Angle: 87\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 89\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 77\n",
      "Servo Angle: 76\n",
      "Servo Angle: 62\n",
      "Servo Angle: 62\n",
      "Servo Angle: 61\n",
      "Servo Angle: 62\n",
      "Servo Angle: 62\n",
      "Servo Angle: 62\n",
      "Servo Angle: 63\n",
      "Servo Angle: 75\n",
      "Servo Angle: 75\n",
      "Servo Angle: 62\n",
      "Servo Angle: 75\n",
      "Servo Angle: 61\n",
      "Servo Angle: 73\n",
      "Servo Angle: 75\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 53\n",
      "Servo Angle: 89\n",
      "Servo Angle: 48\n",
      "Servo Angle: 78\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 16\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 29\n",
      "Servo Angle: 89\n",
      "Servo Angle: 90\n",
      "Servo Angle: 29\n",
      "Servo Angle: 89\n",
      "Servo Angle: 26\n",
      "Servo Angle: 90\n",
      "Servo Angle: 91\n",
      "Servo Angle: 89\n",
      "Servo Angle: 61\n",
      "Servo Angle: 61\n",
      "Servo Angle: 61\n",
      "Servo Angle: 75\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 77\n",
      "Servo Angle: 87\n",
      "Servo Angle: 28\n",
      "Servo Angle: 89\n",
      "Servo Angle: 88\n",
      "Servo Angle: 88\n",
      "Servo Angle: 11\n",
      "Servo Angle: 89\n",
      "Servo Angle: 89\n",
      "Servo Angle: 25\n",
      "Servo Angle: 90\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import requests\n",
    "import time\n",
    "\n",
    "# Load YOLO\n",
    "net = cv2.dnn.readNet(\"yolov3.weights\", \"yolov3.cfg\")\n",
    "layer_names = net.getLayerNames()\n",
    "\n",
    "output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]\n",
    "# Load class labels\n",
    "with open(\"coco.names\", \"r\") as f:\n",
    "    classes = [line.strip() for line in f]\n",
    "\n",
    "# ThingSpeak parameters\n",
    "WRITE_API_KEY = \"4GCWNDENM6E0AHGL\"\n",
    "CHANNEL_ID = 2528678\n",
    "\n",
    "# Function to detect objects\n",
    "def detect_objects(img):\n",
    "    height, width, channels = img.shape\n",
    "    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n",
    "    net.setInput(blob)\n",
    "    outs = net.forward(output_layers)\n",
    "\n",
    "    class_ids = []\n",
    "    confidences = []\n",
    "    boxes = []\n",
    "    for out in outs:\n",
    "        for detection in out:\n",
    "            scores = detection[5:]\n",
    "            class_id = np.argmax(scores)\n",
    "            confidence = scores[class_id]\n",
    "            if confidence > 0.5:\n",
    "                center_x = int(detection[0] * width)\n",
    "                center_y = int(detection[1] * height)\n",
    "                w = int(detection[2] * width)\n",
    "                h = int(detection[3] * height)\n",
    "                x = int(center_x - w / 2)\n",
    "                y = int(center_y - h / 2)\n",
    "                boxes.append([x, y, w, h])\n",
    "                confidences.append(float(confidence))\n",
    "                class_ids.append(class_id)\n",
    "    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)\n",
    "    return indexes, boxes, class_ids  # Return class_ids along with indexes and boxes\n",
    "\n",
    "\n",
    "def main():\n",
    "    cap = cv2.VideoCapture(1)\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        indexes, boxes, class_ids = detect_objects(frame)  # Capture class_ids variable\n",
    "\n",
    "        for i in range(len(boxes)):\n",
    "            if i in indexes:\n",
    "                x, y, w, h = boxes[i]\n",
    "                label = str(classes[class_ids[i]])\n",
    "                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)\n",
    "                cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)\n",
    "\n",
    "                # Calculate servo angle\n",
    "                x_center = x + w / 2\n",
    "                servo_angle = int(np.interp(x_center, [0, frame.shape[1]], [0, 180]))\n",
    "\n",
    "                # Send servo angle to ThingSpeak\n",
    "                params = {\n",
    "                    \"api_key\": WRITE_API_KEY,\n",
    "                    \"field1\": servo_angle\n",
    "                }\n",
    "                response = requests.post(f\"https://api.thingspeak.com/update?api_key={WRITE_API_KEY}&field1={servo_angle}\")\n",
    "                print(f\"Servo Angle: {servo_angle}\")\n",
    "\n",
    "        cv2.imshow(\"Farm Field Monitoring\", frame)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c367a8f-a681-4198-8777-f85f02778848",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 141\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 134\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 102\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 35\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 105\n",
      "Servo Angle: 105\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 100\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 91\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 89\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 90\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 91\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 87\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 89\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 73\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 78\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 87\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 86\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 90\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 87\n",
      "Servo Angle: 155\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 78\n",
      "Servo Angle: 155\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 80\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 79\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 77\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 80\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 79\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 79\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 78\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 78\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 81\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 87\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 88\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 131\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 139\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 87\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 44\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 35\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 35\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 76\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 61\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 62\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 61\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 59\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 58\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 90\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 45\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 45\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 62\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 58\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 62\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 79\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 75\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 74\n",
      "Servo Angle: 90\n",
      "Object detected, Signal sent: 1\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "No object detected, Signal sent: 0\n",
      "Servo Angle: 90\n",
      "Servo Angle: 156\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 92\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 73\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 73\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 73\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 70\n",
      "Object detected, Signal sent: 1\n",
      "Servo Angle: 71\n",
      "Object detected, Signal sent: 1\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import requests\n",
    "import time\n",
    "\n",
    "# Load YOLO\n",
    "net = cv2.dnn.readNet(\"yolov3.weights\", \"yolov3.cfg\")\n",
    "layer_names = net.getLayerNames()\n",
    "\n",
    "output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]\n",
    "# Load class labels\n",
    "with open(\"coco.names\", \"r\") as f:\n",
    "    classes = [line.strip() for line in f]\n",
    "\n",
    "# ThingSpeak parameters\n",
    "WRITE_API_KEY = \"4GCWNDENM6E0AHGL\"\n",
    "CHANNEL_ID = 2528678\n",
    "\n",
    "# Function to detect objects\n",
    "def detect_objects(img):\n",
    "    height, width, channels = img.shape\n",
    "    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)\n",
    "    net.setInput(blob)\n",
    "    outs = net.forward(output_layers)\n",
    "\n",
    "    class_ids = []\n",
    "    confidences = []\n",
    "    boxes = []\n",
    "    for out in outs:\n",
    "        for detection in out:\n",
    "            scores = detection[5:]\n",
    "            class_id = np.argmax(scores)\n",
    "            confidence = scores[class_id]\n",
    "            if confidence > 0.5:\n",
    "                center_x = int(detection[0] * width)\n",
    "                center_y = int(detection[1] * height)\n",
    "                w = int(detection[2] * width)\n",
    "                h = int(detection[3] * height)\n",
    "                x = int(center_x - w / 2)\n",
    "                y = int(center_y - h / 2)\n",
    "                boxes.append([x, y, w, h])\n",
    "                confidences.append(float(confidence))\n",
    "                class_ids.append(class_id)\n",
    "    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)\n",
    "    return indexes, boxes, class_ids  # Return class_ids along with indexes and boxes\n",
    "\n",
    "\n",
    "def main():\n",
    "    cap = cv2.VideoCapture(1)\n",
    "    object_detected = False\n",
    "    while True:\n",
    "        ret, frame = cap.read()\n",
    "        indexes, boxes, class_ids = detect_objects(frame)  # Capture class_ids variable\n",
    "\n",
    "        if len(indexes) > 0:\n",
    "            object_detected = True\n",
    "        else:\n",
    "            object_detected = False\n",
    "\n",
    "        for i in range(len(boxes)):\n",
    "            if i in indexes:\n",
    "                x, y, w, h = boxes[i]\n",
    "                label = str(classes[class_ids[i]])\n",
    "                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)\n",
    "                cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)\n",
    "\n",
    "                # Calculate servo angle\n",
    "                x_center = x + w / 2\n",
    "                servo_angle = int(np.interp(x_center, [0, frame.shape[1]], [0, 180]))\n",
    "\n",
    "                # Send servo angle to ThingSpeak\n",
    "                params = {\n",
    "                    \"api_key\": WRITE_API_KEY,\n",
    "                    \"field1\": servo_angle\n",
    "                }\n",
    "                response = requests.post(f\"https://api.thingspeak.com/update?api_key={WRITE_API_KEY}&field1={servo_angle}\")\n",
    "                print(f\"Servo Angle: {servo_angle}\")\n",
    "\n",
    "        # Send object detected signal to ThingSpeak\n",
    "        if object_detected:\n",
    "            requests.post(f\"https://api.thingspeak.com/update?api_key={WRITE_API_KEY}&field2=1\")\n",
    "            print(\"Object detected, Signal sent: 1\")\n",
    "        else:\n",
    "            requests.post(f\"https://api.thingspeak.com/update?api_key={WRITE_API_KEY}&field2=0\")\n",
    "            print(\"No object detected, Signal sent: 0\")\n",
    "\n",
    "        cv2.imshow(\"Farm Field Monitoring\", frame)\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af204642-322c-4d50-b26f-6c943b14ad6a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
